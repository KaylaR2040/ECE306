
//===========================================================================
// File Name : switches.c
//
// Description: This file contains the code for when a switch is pressed and
//
// Author: Kayla Radu
// Date: Sept 20, 2024
// Compiler: Built with Code Composer Studio Version: 12.8.0.00012


#include  "msp430.h"
#include  <string.h>
#include  "functions.h"
#include  "LCD.h"
#include  "ports.h"
#include "macros.h"
#include "switches.h"
#include <stdio.h>

// Global Variables
extern volatile unsigned int Time_Sequence; // Already existing
extern volatile unsigned int switchpressed = OFF;
extern volatile unsigned int count_debounce_SW1 = OFF;
extern volatile unsigned int count_debounce_SW2 = OFF;
extern volatile unsigned int debounce_statesw1;
extern volatile unsigned int debounce_statesw2;
extern volatile unsigned char display_changed;
extern char display_line[4][11];
extern char *display[4];




// ENABLE SWITCHES

// ENABLE SW1
void enable_switch_SW1(void){
    P5OUT |=  SW1;
    P5DIR &= ~SW1;
}
// ENABLE SW2
void enable_switch_SW2(void){
    P5OUT |=  SW2;
    P5DIR &= ~SW2;
}
// ENABLE BOTH
void enable_switches(void){
    enable_switch_SW1();
    enable_switch_SW2();
}



// DISABLE SWITCHES

// DISABLE SW1
void disable_switch_SW1(void){
    P5OUT |=  SW1;
    P5DIR &= ~SW1;
}
// DISABLE SW2
void disable_switch_SW2(void){
    P5OUT |=  SW2;
    P5DIR &= ~SW2;
}
// DISABLE BOTH
void disable_switches(void){
    disable_switch_SW1();
    disable_switch_SW2();
}



#pragma vector = PORT4_VECTOR

__interrupt void switchP4_interrupt(void){
    // Switch 1
    if (P4IFG & SW1) {
        P4IFG &= ~SW1;          // IFG SW1 cleared
        switchpressed = TRUE;
        Time_Sequence = RESTART;
        count_debounce_SW1 = RESTART;
        debounce_statesw1 = ON;
        disable_switches();
        strcpy(display_line[0], "          ");
        strcpy(display_line[1], " SWITCH 1 ");
        strcpy(display_line[2], " PRESSED  ");
        strcpy(display_line[3], "          ");
        display_changed = TRUE;

    }
}
#pragma vector = PORT2_VECTOR

__interrupt void switchP2_interrupt(void){
    // Switch 2
    if (P2IFG & SW2) {
        P2IFG &= ~SW2;          // IFG SW2 cleared
        switchpressed = TRUE;
        Time_Sequence = RESTART;
        count_debounce_SW2 = RESTART;
        debounce_statesw2 = ON;
        disable_switches();
        strcpy(display_line[0], "          ");
        strcpy(display_line[1], " SWITCH 2 ");
        strcpy(display_line[2], " PRESSED  ");
        strcpy(display_line[3], "          ");
        display_changed = TRUE;

    }
}


void Debounce_State(void){
    if(debounce_statesw1){
        if(count_debounce_SW1 >= DEBOUNCE_TIME){
            debounce_statesw1 = OFF;
            enable_switches();
        }
    }
    if(debounce_statesw2){
        if(count_debounce_SW2 >= DEBOUNCE_TIME){
            debounce_statesw2 = OFF;
            enable_switches();
        }
    }
}



////------------------------------------------------------------------------------
//void Switches_Process(void){
////------------------------------------------------------------------------------
//// This function calls the individual Switch Functions
////------------------------------------------------------------------------------
//Switch1_Process();
//Switch2_Process();
//}
////------------------------------------------------------------------------------
//



//
////------------------------------------------------------------------------------
//void Switch1_Process(void){
////------------------------------------------------------------------------------
//// Switch 1 Configurations
////------------------------------------------------------------------------------
//    if (okay_to_look_at_switch1 && (sw1_position == RELEASED)) {  // Check if we are allowed to process the switch and if it was previously released
//        if (!(P4IN & SW1)) {  // Check if Switch 1 is pressed (active low)
//            sw1_position = PRESSED;
//            okay_to_look_at_switch1 = NOT_OKAY;  // Prevent further processing until debounce
//            count_debounce_SW1 = DEBOUNCE_RESTART;  // Start debouncing
//            // This is going to change what action you are performing by incrementing the value
//
//
//
//            // This is going to change the LCD Display
//            switch (event_Counter) {
//            case 0:
//                eventlcd = PROJECTFIVE;
//                event_Counter = 1;
//                break;
//            case 1:
//                eventlcd = CIRCLE;
//                event_Counter = 2;
//                break;
//            case 2:
//                eventlcd = TRIANGLE;
//                event_Counter = 3;
//                break;
//            case 3:
//                eventlcd = FIGUREEIGHT;
//                event_Counter = 0;
//                break;
//            default:break;
//            }
//
//
//            strcpy(display_line[0], "          ");
//            strcpy(display_line[1], "          ");
//            strcpy(display_line[3], "          ");
//
//            char newline2[11]; // 10 characters
//            sprintf(newline2, "     %c     ", eventlcd); // Fill with 5 spaces, the event character, and 5 more spaces
//            strncpy(display_line[2], newline2, 10); // Copy exactly 10 characters into display_line[2]
//
//            display_changed = TRUE;
//        }
//    }
//
//    if (count_debounce_SW1 <= DEBOUNCE_TIME) {
//        count_debounce_SW1++;  // Increment debounce counter
//    } else {
//        okay_to_look_at_switch1 = OKAY;  // Allow further checks on the switch
//        if (P4IN & SW1) {  // Check if Switch 1 is released (active high)
//            sw1_position = RELEASED;  // Set switch to RELEASED
//        }
//    }
//}
//
//
////------------------------------------------------------------------------------
//
////------------------------------------------------------------------------------
//void Switch2_Process(void){
////------------------------------------------------------------------------------
//// Switch 2 Configurations
////------------------------------------------------------------------------------
//    if (okay_to_look_at_switch2 && (sw2_position == RELEASED)){
//        if (!(P2IN & SW2)){
//            sw2_position = PRESSED;
//            okay_to_look_at_switch2 = NOT_OKAY;
//            count_debounce_SW2 = DEBOUNCE_RESTART;
//
//
//            switch (event_Counter-1) {
//            case 0:
//                event = STRAIGHT;
//                break;
//            case 1:
//                event = CIRCLE;
//                break;
//            case 2:
//                event = TRIANGLE;
//                triangleset = 1;
//                break;
//            case -1:
//                event = FIGUREEIGHT;
//                figureeightset = 1;
//                break;
//            default:break;
//            }
//            switchpressed = 1;
//            Time_Sequence = 0;
//
//
//
//    // do what you want with button press
//        }
//    }
//    if (count_debounce_SW2 <= DEBOUNCE_TIME){
//        count_debounce_SW2++;
//    }
//    else{
//        okay_to_look_at_switch2 = OKAY;
//        if (P2IN & SW2){
//            sw2_position = RELEASED;
//        }
//    }
//    }
////------------------------------------------------------------------------------
