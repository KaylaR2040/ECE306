/*
 * ADC.c
 *
 *  Created on: Oct 19, 2024
 *      Author: kaylaradu
 */



#include  "msp430.h"
#include  <string.h>
#include <switches.h>
#include  "functions.h"
#include  "LCD.h"
#include  "ports.h"
#include  "macros.h"
#include  "motors.h"
#include  "Display.h"
#include  "timersB0.h"
#include  "switches.h"
#include  "ThumbWheel.h"
#include  "ADC.h"


extern unsigned int backlight_status;

volatile unsigned int ADC_Channel;
volatile unsigned int ADC_Left_Detect;
volatile unsigned int ADC_Right_Detect;
volatile unsigned int ADC_Thumb;

extern char adc_char[10];

// Init ADC
void Init_ADC(void){
    //-----------------------------------------------------------------------------
    // V_DETECT_L      (0x04) // Pin 2 A2
    // V_DETECT_R      (0x08) // Pin 3 A3
    // V_THUMB         (0x20) // Pin 5 A5
    //-----------------------------------------------------------------------------
    // ADCCTL0 Register
    ADCCTL0 = 0;                        // Reset
    ADCCTL0 |= ADCSHT_2;                // 16 ADC clocks
    ADCCTL0 |= ADCMSC;                  // MSC
    ADCCTL0 |= ADCON;                   // ADC ON

    // ADCCTL1 Register
    ADCCTL1 = 0;                // Reset
    ADCCTL1 |= ADCSHS_0;        // 00b = ADCSC bit
    ADCCTL1 |= ADCSHP;          // ADC sample-and-hold SAMPCON signal from sampling timer
    ADCCTL1 &= ~ADCISSH;        // ADC invert signal sample-and-hold.
    ADCCTL1 |= ADCDIV_0;        // ADC clock divider - 000b = Divide by 1
    ADCCTL1 |= ADCSSEL_0;       // ADC clock MODCLK
    ADCCTL1 |= ADCCONSEQ_0;     // ADC conversion sequence 00b = Single-channel single-conversion
    // ADCCTL1 & ADCBUSY  identifies a conversion is in process

    // ADCCTL2 Register
    ADCCTL2 = 0;
    ADCCTL2 |= ADCPDIV0;
    ADCCTL2 |= ADCRES_2;
    ADCCTL2 &= ~ADCDF;
    ADCCTL2 &= ~ADCSR;

    // ADCMCTL0 Register
    ADCMCTL0 |= ADCSREF_0;
    ADCMCTL0 |= ADCINCH_5;
    ADCIE |= ADCIE0;
    ADCCTL0 |= ADCENC;
    ADCCTL0 |= ADCSC;

}



#pragma vector=ADC_VECTOR

__interrupt void ADC_ISR(void){
    backlight_status = ON;
    switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){
    case ADCIV_NONE:
        break;
    case ADCIV_ADCOVIFG:   // When a conversion result is written to the ADCMEM0
        // before its previous conversion result was read.
        break;
    case ADCIV_ADCTOVIFG:   // ADC conversion-time overflow
        break;
    case ADCIV_ADCHIIFG:    // Window comparator interrupt flags
        break;
    case ADCIV_ADCLOIFG:    // Window comparator interrupt flag
        break;
    case ADCIV_ADCINIFG:    // Window comparator interrupt flag
        break;
    case ADCIV_ADCIFG:      // ADCMEM0 memory register with the conversion result
        ADCCTL0 &= ~ADCENC;                          // Disable ENC bit.


        switch (ADC_Channel++){
        case 0:                                   // Channel A2 Interrupt
            ADC_Left_Detect = ADCMEM0;               // Move result into Global Values
            ADC_Left_Detect = ADC_Left_Detect >> 2;  // Divide the result by 4
            HexToBCD(ADC_Left_Detect);
            dispPrint(adc_char,2);
            ADCMCTL0 &= ~ADCINCH_2;                  // Disable Last channel A2
            ADCMCTL0 |=  ADCINCH_3;                  // Enable Next channel A3
            break;
        case 1:                                   // Channel A3 Interrupt
            ADC_Right_Detect = ADCMEM0;              // Move result into Global Values
            ADC_Right_Detect = ADC_Right_Detect >> 2;// Divide the result by 4
            HexToBCD(ADC_Right_Detect);
            dispPrint(adc_char,3);
            ADCMCTL0 &= ~ADCINCH_3;                  // Disable Last channel A2
            ADCMCTL0 |=  ADCINCH_5;                  // Enable Next channel A1
            break;
        case 2:                                   // Channel A1 Interrupt
            ADC_Thumb = ADCMEM0;                     // Move result into Global Values
            ADC_Thumb = ADC_Thumb >> 2;              // Divide the result by 4
            HexToBCD(ADC_Thumb);
            dispPrint(adc_char,4);
            ADCMCTL0 &= ~ADCINCH_5;                  // Disable Last channel A?
            ADCMCTL0 |= ADCINCH_2;                   // Enable Next [First] channel 2
            ADC_Channel=0;
            break;
        default:
            break;
        }
        ADCCTL0 |= ADCENC;                          // Enable Conversions
        ADCCTL0 |= ADCSC;
        break;
    default:
        break;
    }
}
