/*
 * wheels.c
 *
 *  Created on: Nov 21, 2024
 *      Author: Kayla Radu
 */


#include  "msp430.h"
#include  "functions.h"
#include  "LCD.h"
#include  "ports.h"
#include  "macros.h"


void Wheels_Stop(void);
void Wheels_Forward(void);
void Wheels_Reverse(void);
void Wheels_clkw(void);
void Wheels_counterclkw(void);
void motor_run_forward(void);
void motor_run_backward(void);
void motor_run_right(void);
void motor_run_left(void);



void motor_off (void) {
  RIGHT_FORWARD_SPEED = 0;
  RIGHT_REVERSE_SPEED = 0;
  LEFT_FORWARD_SPEED = 0;
  LEFT_REVERSE_SPEED = 0;
}

void motor_run_forward (void) {
    LCD_BACKLITE_DIMING = PERCENT_80; // P6.0 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM ON amount

    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = FAST; // P6.1 Right Forward PWM ON amount

   RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
    RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM ON amount

    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM OFF
    LEFT_FORWARD_SPEED = FAST; // P6.3 Left Forward PWM ON amount

    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM OFF
    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM ON amount
}

void motor_run_backward (void) {
    LCD_BACKLITE_DIMING = PERCENT_80; // P6.0 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM ON amount

   RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = WHEEL_OFF;; // P6.1 Right Forward PWM ON amount

    RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
    RIGHT_REVERSE_SPEED = FAST; // P6.2 Right Reverse PWM ON amount

    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM OFF
    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM ON amount

    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM OFF
    LEFT_REVERSE_SPEED = FAST; // P6.4 Left Reverse PWM ON amount
}

void motor_run_right (void) {
    LCD_BACKLITE_DIMING = PERCENT_80; // P6.0 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM ON amount

    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Right Forward PWM OFF
   RIGHT_FORWARD_SPEED = WHEEL_OFF;; // P6.1 Right Forward PWM ON amount

    RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
//    RIGHT_REVERSE_SPEED = SLOW; // P6.2 Right Reverse PWM ON amount

    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM OFF
    LEFT_FORWARD_SPEED = NINETY; // P6.3 Left Forward PWM ON amount

    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM OFF
    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM ON amount
}

void motor_run_left (void) {
    LCD_BACKLITE_DIMING = PERCENT_80; // P6.0 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM ON amount

    RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Right Forward PWM OFF
    RIGHT_FORWARD_SPEED = FOURFIVE; // P6.1 Right Forward PWM ON amount

    RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
   RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM ON amount

    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM OFF
    LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.3 Left Forward PWM ON amount

    LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.4 Left Reverse PWM OFF
//    LEFT_REVERSE_SPEED = SLOW; // P6.4 Left Reverse PWM ON amount
}

void motor_check (void) {
  if ((RIGHT_FORWARD_SPEED > 0) && (RIGHT_REVERSE_SPEED > 0)) {
    motor_off();
    P1OUT |= RED_LED;
  }
  if ((LEFT_FORWARD_SPEED > 0) && (LEFT_REVERSE_SPEED > 0)) {
    motor_off();
    P1OUT |= RED_LED;
  }
}

void Wheels_Stop(void){//code to stop wheels
    P6OUT &= ~L_FORWARD; // Set Port pin Low [Wheel Off]
    P6OUT &= ~R_FORWARD; // Set Port pin Low [Wheel Off]
    P6OUT &= ~L_REVERSE; // Set Port pin Low [Wheel Off]
    P6OUT &= ~R_REVERSE; // Set Port pin Low [Wheel Off]
}

void Wheels_Forward(void){// code to move forwards
    P6OUT |= L_FORWARD; // Set Port pin High [Wheel On]
    P6OUT |= R_FORWARD; // Set Port pin High [Wheel On]
}


void Wheels_Reverse(void){//code to move in reverse
    P6OUT |= L_REVERSE;
    P6OUT |= R_REVERSE;
}

void Wheels_clkw(void){
    P6OUT |= L_FORWARD;
    P6OUT |= R_REVERSE;
}

void Wheels_counterclkw(void){
    P6OUT |= R_FORWARD;
    P6OUT |= L_REVERSE;
}



// This sets the car to start moving toward the line unitl it sees it
void start_movement(void){
    Off_Case();
    LEFT_FORWARD_SPEED = 12000;
    RIGHT_FORWARD_SPEED = 12000;

    strcpy(display_line[0], "INTERCEPT ");
    display_changed = TRUE;

    //        if((ADC_Left_Detect >= BLACK) || (ADC_Right_Detect >= BLACK)){
    //            state = SPIN;
    //        }

            if((ADC_Left_Detect >= 500 ) && (ADC_Right_Detect >= 500)){
                state = DETECTED;
            }

}

void detect_movement(void){
    FlagWait = TRUE;
    LEFT_FORWARD_SPEED = WHEEL_OFF;
    RIGHT_FORWARD_SPEED = WHEEL_OFF;
    strcpy(display_line[0], "BLACK LINE ");
    display_changed = TRUE;
    if(Waitcount >=4){
    state = SPIN;
    FlagWait = FALSE;
    Waitcount=0;
    }
}

void spinning_movement(void){
    // now get it off course like a turn
    strcpy(display_line[0], "SPINNING ");
    display_changed = TRUE;
    if(ADC_Left_Detect >= BLACKLSP && ADC_Right_Detect >= BLACKRSP){
        state = TRACKWAIT;
    }
    else {
        RIGHT_FORWARD_SPEED = SPINSPEED;
        LEFT_REVERSE_SPEED = SPINSPEED;
    }

}
void track_wait(void){
    FlagWait = TRUE;
    strcpy(display_line[0], " TRACKWAIT");
    display_changed = TRUE;
    RIGHT_FORWARD_SPEED = WHEEL_OFF;
    LEFT_REVERSE_SPEED = WHEEL_OFF;
    RIGHT_REVERSE_SPEED = WHEEL_OFF;
    LEFT_FORWARD_SPEED = WHEEL_OFF;

    if(Waitcount >=4){
        state = TRACK;
        FlagWait = FALSE;
        Waitcount=0;
    }

}

void tracking_movement(void){
    strcpy(display_line[0], " TRACKING ");
    display_changed = TRUE;
    RIGHT_FORWARD_SPEED = WHEEL_OFF;
    RIGHT_REVERSE_SPEED = WHEEL_OFF;
    LEFT_FORWARD_SPEED = WHEEL_OFF;
    LEFT_REVERSE_SPEED = WHEEL_OFF;

    // IT IS ON THE LINE
    if(ADC_Left_Detect >= BLACKDETECTL && ADC_Right_Detect >= BLACKDETECTR){
        strcpy(display_line[0], " STRAIGHT ");
        display_changed = TRUE;
        RIGHT_FORWARD_SPEED = STRAIGHTMOVE;
        LEFT_FORWARD_SPEED = STRAIGHTMOVE;
        // THE LEFT SENSOR IS MISSING, BUT RIGHT SENSOR IS ON THE LINE
    }else if(ADC_Left_Detect < BLACKDETECTL && ADC_Right_Detect >= BLACKDETECTR){
        strcpy(display_line[0], "  RIGHT   ");
                display_changed = TRUE;
        LEFT_FORWARD_SPEED = TURNSPEED;
        RIGHT_FORWARD_SPEED = WHEEL_OFF;
        DirectionTurn = RIGHT;
        // THE RIGHT SENSOR IS MISSING I NEED TO TURN LEFT TOWARD THE LINE
    }else if(ADC_Right_Detect < BLACKDETECTR && ADC_Left_Detect >= BLACKDETECTL){
        strcpy(display_line[0], "   LEFT   ");
        display_changed = TRUE;
        RIGHT_FORWARD_SPEED = TURNSPEED;
        LEFT_FORWARD_SPEED = WHEEL_OFF;
        DirectionTurn = LEFT;
        // IT IS WAYYY OFF AND CANNOT FIND THE LINE
    }else
//        if(ADC_Left_Detect < BLACKL && ADC_Right_Detect < BLACKR)
        {
        strcpy(display_line[0], "   LOST   ");
        display_changed = TRUE;
        LEFT_FORWARD_SPEED = WHEEL_OFF;
        RIGHT_FORWARD_SPEED = WHEEL_OFF;
        LEFT_REVERSE_SPEED = WHEEL_OFF;
        RIGHT_REVERSE_SPEED = WHEEL_OFF;

        // GO THE OPPOSITE WAY IT DID EARLIER
//        if(DirectionTurn == RIGHT){
//            RIGHT_FORWARD_SPEED = SPEED1;
//            LEFT_FORWARD_SPEED = WHEEL_OFF;
//            DirectionTurn = LEFT;
//        }else if(DirectionTurn == LEFT){
//            LEFT_FORWARD_SPEED = SPEED1;
//            RIGHT_FORWARD_SPEED = WHEEL_OFF;
//            DirectionTurn = RIGHT;
//        }

        RIGHT_REVERSE_SPEED = SPEED1;
        LEFT_REVERSE_SPEED = SPEED1;

//        }else {
//            strcpy(display_line[0], "   FALSE  ");
//            display_changed = TRUE;
//            RIGHT_FORWARD_SPEED = SPEED1;
//            LEFT_FORWARD_SPEED = WHEEL_OFF;
//
//
//        }
    }

    FlagSpinR = TRUE;
    if(SpincountR >= FIFTYSEC){
        state = END;
        SpincountR = OFF;
        FlagSpinR = FALSE;
    }

}


void end_state(void){
    strcpy(display_line[0], " STOPPED ");
    update_display = TRUE;
    display_changed = 1;
    Off_Case();
    SpincountL = 0;
    SpincountR = 0;
    state = NONE;

}


void Off_Case(void){
    //    Forward_Off();
    //    Reverse_Off();
    RIGHT_FORWARD_SPEED = WHEEL_OFF;   // P6.1 Right Forward PWM duty cycle

    LEFT_FORWARD_SPEED = WHEEL_OFF;    // P6.2 Right Forward PWM duty cycl

    RIGHT_REVERSE_SPEED = WHEEL_OFF;   // P6.3 Left Forward PWM duty cycle

    LEFT_REVERSE_SPEED = WHEEL_OFF;
}
