/*
 * Interrupts.c
 *
 *  Created on: Nov 10, 2024
 *      Author: kaylaradu
 */


// Includes
#include "LCD.h"
#include "functions.h"
#include "macros.h"
#include "wheels.h"
#include "msp430.h"
#include "ports.h"
#include "switches.h"
#include <string.h>
#include "timersB0.h"
#include <stdio.h>




// ADC Interrupt
#pragma vector = ADC_VECTOR
__interrupt void ADC_ISR(void){
    //    backlight_status = ON;
    switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){

    case ADCIV_NONE:
        break;
    case ADCIV_ADCOVIFG:   // When a conversion result is written to the ADCMEM0
        // before its previous conversion result was read.
        break;
    case ADCIV_ADCTOVIFG:   // ADC conversion-time overflow
        break;
    case ADCIV_ADCHIIFG:    // Window comparator interrupt flags
        break;
    case ADCIV_ADCLOIFG:    // Window comparator interrupt flag
        break;
    case ADCIV_ADCINIFG:    // Window comparator interrupt flag
        break;
    case ADCIV_ADCIFG:      // ADCMEM0 memory register with the conversion result
        ADCCTL0 &= ~ADCENC;                          // Disable ENC bit.



        switch (ADC_Channel++){
        case 0:                                   // Channel A2 Interrupt
            ADCMCTL0 &= ~ADCINCH_2;                  // Disable Last channel A2
            ADCMCTL0 |=  ADCINCH_3;                  // Enable Next channel A3

            ADC_Left_Detect = ADCMEM0;               // Move result into Global Values
            ADC_Left_Detect = ADC_Left_Detect >> 2;  // Divide the result by 4
            HexToBCD(ADC_Left_Detect);
            adc_line(2,2);


            break;

        case 1:                                   // Channel A3 Interrupt
            ADCMCTL0 &= ~ADCINCH_3;                  // Disable Last channel A2
            ADCMCTL0 |=  ADCINCH_5;                  // Enable Next channel A1

            ADC_Right_Detect = ADCMEM0;              // Move result into Global Values
            ADC_Right_Detect = ADC_Right_Detect >> 2;// Divide the result by 4
            HexToBCD(ADC_Right_Detect);
            adc_line(3,3);


            break;

        case 2:                                   // Channel A1 Interrupt
            ADCMCTL0 &= ~ADCINCH_5;                  // Disable Last channel A?
            ADCMCTL0 |= ADCINCH_2;                   // Enable Next [First] channel 2

            ADC_Thumb = ADCMEM0;                     // Move result into Global Values
            ADC_Thumb = ADC_Thumb >> 2;              // Divide the result by 4
            HexToBCD(ADC_Thumb);
//            adc_line(4,4);


            ADC_Channel = 0;
            break;

        default:
            break;
        }
        ADCCTL0 |= ADCENC;                          // Enable Conversions
        ADCCTL0 |= ADCSC;
        break;
        default:
            break;
    }
}




//-----------------------------------------------------------------------------
// 200ms TRIGGER WHAT HAPPENS
//---------------------------------------------------------------------------
#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer0_B0_ISR(void){

    Displaycount += 2;
    if(Displaycount >= 9998){
        Displaycount = 0;
    }
//    timerdisplay();
//    strncpy(display_line[4], "          ", 10);
//
//
//
//    display_changed = TRUE;
    update_display = TRUE;

    Time_Sequence++;
    //    backlight_changed = TRUE;
    //    backlight = ~backlight;
//    P6OUT |= LCD_BACKLITE;


    if(DimFlag == TRUE){
     if (Blink_counter++ >= 20){
         Blink_counter = 0;
         LCD_BACKLITE_DIMING = PERCENT_80; //Flips on

     }
    }


    if(FlagSpinL == TRUE){
        SpincountL++;
    }
    if(FlagSpinR == TRUE){
            SpincountR++;
        }

}

//-----------------------------------------------------------------------------
// DEBOUNCE TIMER
//---------------------------------------------------------------------------
#pragma vector=TIMER0_B1_VECTOR
__interrupt void TIMER0_B1_ISR(void){
    switch(__even_in_range(TB0IV,14)){
    case  0: break;                    // No interrupt
    case  2:                           // CCR1 Used for SW1 Debounce
        count_debounce_SW1++;
        if (count_debounce_SW1 >= DEBOUNCE_TIME){
            count_debounce_SW1 = 0;

            TB0CCTL1 &= ~CCIE;
            P4IFG &= ~SW1;
            P4IE  |= SW1;

            TB0CCTL0 |= CCIE;
        }
        break;

    case  4:                           // CCR2 Used for SW2 Debounce
        count_debounce_SW2++;
        if (count_debounce_SW2 >= DEBOUNCE_TIME){
            count_debounce_SW2 = 0;

            TB0CCTL2 &= ~CCIE;
            P2IFG &= ~SW2;
            P2IE  |=  SW2;

            TB0CCTL0 |= CCIE;
        }

        break;

    case 14:                           // overflow available for greater than 1 second timer
        break;
    default: break;
    }
}


#pragma vector = TIMER0_B3_VECTOR
__interrupt void Timer0_B3_ISR(void){
    TB0CCR2 += TB0CCR2_INTERVAL;
}


void timerdisplay(void){
    int x = Displaycount;
    if(x%1000){
        dec = (x / 1000) + '0';
        x = x/1000;
        one = (x / 100)+ '0';
        x = x/100;
        ten = (x / 10)+ '0';
        x = x/10;
        hun = x + '0';
    }else if(x %100){
        dec = (x / 1000) + '0';
        one = (x / 100)+ '0';
        x = x/100;
        ten = (x / 10)+ '0';
        x = x/10;
        hun = x + '0';
    }else if(x %10){
        dec = (x / 1000) + '0';
        one = (x / 100)+ '0';
        ten = (x / 10)+ '0';
        x = x/10;
        hun = x + '0';
    }else {
        dec = (x / 1000) + '0';
        one = (x / 100)+ '0';
        ten = (x / 10)+ '0';
        hun = x + '0';
    }

}

// UART ISR for handling received data
#pragma vector=EUSCI_A0_VECTOR
__interrupt void eUSCI_A0_ISR(void) {
    unsigned int temp;
    switch(__even_in_range(UCA0IV, 0x08)) {
        case 0: // Vector 0 - no interrupt
            break;
        case 2: // Vector 2 – RXIFG
            temp = usb_rx_ring_wr++;
            USB_Char_Rx[temp] = UCA0RXBUF; // Store received character into ring buffer
            if (usb_rx_ring_wr >= (sizeof(USB_Char_Rx))) {
                usb_rx_ring_wr = BEGINNING; // Wrap around if at end of ring buffer
            }
            break;
        case 4: // Vector 4 – TXIFG
            // Code for transmitting if needed
            break;
        default:
            break;
    }
}

// Switch ISR for changing the baud rate
#pragma vector=PORT1_VECTOR
__interrupt void Port_1_ISR(void) {
    if (P1IFG & SW1) {
        Change_Baud_Rate(115200); // Switch to 115200 baud
        P1IFG &= ~SW1; // Clear interrupt flag
    } else if (P1IFG & SW2) {
        Change_Baud_Rate(460800); // Switch to 460800 baud
        P1IFG &= ~SW2; // Clear interrupt flag
    }
}
